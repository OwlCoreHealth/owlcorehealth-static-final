import { getSymptomContext } from "./notion.js";

let sessionMemory = {
  sintomasDetectados: [],
  respostasUsuario: [],
  nome: "",
  idioma: "pt",
  sintomaAtual: null,
  categoriaAtual: null,
  contadorPerguntas: {},
  ultimasPerguntas: []
};

export default async function handler(req, res) {
  try {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "Method not allowed. Use POST." });
    }

    const { message, name, age, sex, weight } = req.body;

    if (!message || message.trim().length === 0) {
      return res.status(400).json({ error: "No message provided." });
    }

    const isPortuguese = /[√£√µ√ß√°√©√≠√≥√∫]| voc√™|dor|tenho|problema|sa√∫de/i.test(message);
    const userName = name?.trim() || "";
    const userAge = parseInt(age);
    const userSex = (sex || "").toLowerCase();
    const userWeight = parseFloat(weight);

    const hasForm = userName && !isNaN(userAge) && userSex && !isNaN(userWeight);

    sessionMemory.nome = userName;
    sessionMemory.idioma = isPortuguese ? "pt" : "en";
    sessionMemory.respostasUsuario.push(message);
    const frasesSarcasticas = [
      "Sem seu nome, idade ou peso, posso te dar conselhos‚Ä¶ t√£o √∫teis quanto ler a sorte no biscoito da sorte.",
      "Sem dados, minha precis√£o √© t√£o boa quanto um hor√≥scopo de revista.",
      "Ignorar o formul√°rio? Estrat√©gia ousada. Vamos ver no que d√°.",
      "Voc√™ ignora sua sa√∫de assim tamb√©m? Posso tentar adivinhar seu perfil com superpoderes‚Ä¶ ou n√£o.",
      "Quer ajuda, mas n√£o preencheu nada? Legal. Posso tentar uma previs√£o estilo grupo de WhatsApp.",
      "Me ajudar a te ajudar? Preencher o formul√°rio seria um bom come√ßo üòâ"
    ];

    let intro = "";
    if (hasForm) {
      intro = isPortuguese
        ? `${userName}, 28% das pessoas com ${userAge} anos relatam ansiedade, 31% t√™m digest√£o lenta, e 20% n√£o tomam suplemento. Mas voc√™ est√° aqui. Isso j√° √© um passo acima da m√©dia.`
        : `${userName}, 28% of people aged ${userAge} report anxiety, 31% struggle with digestion, and 20% don‚Äôt take any supplements. You‚Äôre already ahead by showing up.`;
    } else {
      intro = frasesSarcasticas[Math.floor(Math.random() * frasesSarcasticas.length)];
    }

    let followups = [];
    let prompt = `${intro}\n\nYou are OwlCoreHealth AI ü¶â ‚Äî a hybrid personality: smart, science-backed, sarcastic when needed, but always delivering useful answers. Never ask vague follow-up questions. Always give clear explanations, risks, and next steps. Guide the user toward solutions.`;

    const contextos = await getSymptomContext(message);
    const contexto = contextos?.[0];
    let categoria = sessionMemory.categoriaAtual || "";
    let sintoma = sessionMemory.sintomaAtual || "";

    if (contexto) {
      sintoma = contexto.sintoma;
      sessionMemory.sintomaAtual = sintoma;
      sessionMemory.categoriaAtual = ""; // zera categoria fallback
    } else if (!sintoma) {
      const msg = message.toLowerCase();
      if (/energia|fadiga|cansa√ßo|exausto|metabolismo/.test(msg)) {
        categoria = "energia";
      } else if (/dor|inflama√ß√£o|dores|incha√ßo|artrite/.test(msg)) {
        categoria = "dor";
      } else if (/gengiva|dente|boca|h√°lito|dent√°rio/.test(msg)) {
        categoria = "boca";
      } else if (/sono|dormir|ins√¥nia|pineal|desintox/.test(msg)) {
        categoria = "sono";
      } else if (/intestino|digest|pris√£o|gases|barriga/.test(msg)) {
        categoria = "intestino";
      } else {
        categoria = "energia";
      }
      sessionMemory.categoriaAtual = categoria;
    }

    const chave = sintoma || categoria;
    sessionMemory.contadorPerguntas[chave] = (sessionMemory.contadorPerguntas[chave] || 0) + 1;
    const etapa = sessionMemory.contadorPerguntas[chave];

    // controle de repeti√ß√£o de followups
    const gerarFollowupsUnicos = (perguntas) => {
      const usadas = sessionMemory.ultimasPerguntas || [];
      const novas = perguntas.filter(p => !usadas.includes(p)).slice(0, 3);
      sessionMemory.ultimasPerguntas = novas;
      return novas;
    };
    const incluirSuplemento = etapa >= 3;

    const blocos = {
      energia: {
        pt: [
          "Falta de energia pode indicar m√° alimenta√ß√£o, sedentarismo ou defici√™ncia de nutrientes como B12 e ferro.",
          "Ignorar a fadiga pode levar a exaust√£o cr√¥nica, depress√£o e dist√∫rbios metab√≥licos.",
          "Estudos mostram que mais de 40% dos adultos com fadiga persistente apresentam desequil√≠brios hormonais.",
          "Nutrientes como magn√©sio, coenzima Q10 e vitamina D ajudam a restaurar a energia.",
          "Quer ver um suplemento que trata diretamente esse tipo de fadiga?"
        ],
        en: [
          "Low energy may come from poor diet, inactivity, or lack of nutrients like B12 and iron.",
          "Ignoring fatigue may cause chronic exhaustion and depression.",
          "Over 40% of people with chronic fatigue show hormonal and nutritional imbalances.",
          "Magnesium, CoQ10 and vitamin D help restore your energy levels.",
          "Would you like to see a supplement that helps with this?"
        ]
      },
      intestino: {
        pt: [
          "Dores intestinais podem indicar desequil√≠brio da microbiota, m√° digest√£o ou intoler√¢ncias alimentares.",
          "Se ignorado, isso pode afetar imunidade, humor e absor√ß√£o de nutrientes.",
          "Mais de 70% das pessoas com intestino desequilibrado relatam ansiedade ou fadiga cr√¥nica.",
          "Probi√≥ticos, enzimas digestivas e fibras sol√∫veis ajudam a restaurar a fun√ß√£o intestinal.",
          "Quer ver uma f√≥rmula ideal para recuperar o equil√≠brio digestivo?"
        ],
        en: [
          "Intestinal pain may be caused by microbiota imbalance, poor digestion or food intolerances.",
          "If left untreated, it may affect your immunity, mood and nutrient absorption.",
          "Over 70% of people with gut issues also suffer from anxiety or chronic fatigue.",
          "Probiotics, digestive enzymes and soluble fibers help restore gut function.",
          "Want to see a formula that supports digestive health?"
        ]
      }
      // ... (outros blocos podem ser adicionados se necess√°rio)
    };
    let corpo = "";
    let idioma = isPortuguese ? "pt" : "en";

    if (contexto) {
      const alerta = contexto.gravidade >= 4
        ? (isPortuguese
          ? "‚ö†Ô∏è Esse sintoma √© s√©rio. Se n√£o cuidar, pode escalar para algo bem pior."
          : "‚ö†Ô∏è This is a serious symptom. Ignoring it could make things worse.")
        : "";

      const base = isPortuguese ? contexto.base_pt : contexto.base_en;
      const p1 = isPortuguese ? contexto.pergunta1_pt : contexto.pergunta1_en;
      const p2 = isPortuguese ? contexto.pergunta2_pt : contexto.pergunta2_en;
      const p3 = isPortuguese ? contexto.pergunta3_pt : contexto.pergunta3_en;

      followups = gerarFollowupsUnicos([
        `${isPortuguese ? "Quer entender" : "Want to know"} ${p1}?`,
        `${isPortuguese ? "Deseja ver como isso impacta" : "Curious how this affects"} ${p2}?`,
        `${isPortuguese ? "Posso explicar solu√ß√µes pr√°ticas sobre" : "I can explain real solutions for"} ${p3}`
      ]);

      corpo = `\n\n${alerta}\n\n${isPortuguese ? "Base cient√≠fica:" : "Scientific insight:"}\n${base}\n\n${
        isPortuguese ? "Vamos aprofundar com 3 ideias pr√°ticas:" : "Let's explore 3 practical angles:"
      }\n1. ${followups[0]}\n2. ${followups[1]}\n3. ${followups[2]}`;

      if (incluirSuplemento) {
        corpo += isPortuguese
          ? "\n\nSe quiser, posso te mostrar o suplemento ideal para esse caso. S√≥ dizer. üòâ"
          : "\n\nIf you're ready, I can show you the ideal supplement for this case. Just ask. üòâ";
      }
    } else {
      const bloco = blocos[categoria] || blocos["energia"];
      const texto = bloco[idioma][Math.min(etapa - 1, bloco[idioma].length - 1)];

      corpo = `\n\n${texto}`;

      followups = gerarFollowupsUnicos(
        etapa < 5
          ? isPortuguese
            ? [
                "Quer entender os riscos se isso for ignorado?",
                "Deseja ver dados reais de quem passou por isso?",
                "Quer saber quais nutrientes combatem isso?"
              ]
            : [
                "Want to know the risks of ignoring this?",
                "Interested in real-world data on this symptom?",
                "Want to discover which nutrients help fight this?"
              ]
          : isPortuguese
            ? [
                "Quer que eu mostre o suplemento ideal para isso?",
                "Deseja ver a avalia√ß√£o completa do produto?",
                "Quer continuar tirando d√∫vidas sobre esse sintoma?"
              ]
            : [
                "Want me to show the best supplement for this?",
                "Want to read the full product review?",
                "Prefer to keep asking about this symptom?"
              ]
      );

      corpo += `\n\n${isPortuguese
        ? "Escolha uma das op√ß√µes abaixo para continuarmos:"
        : "Choose one of the options below to continue:"}\n1. ${followups[0]}\n2. ${followups[1]}\n3. ${followups[2]}`;
    }

    prompt += corpo;
    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.7,
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: message }
        ]
      })
    });

    if (!openaiRes.ok) {
      const errorData = await openaiRes.json();
      console.error("GPT error:", errorData);
      return res.status(500).json({ error: "GPT communication failed", details: errorData });
    }

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || "I'm not sure how to answer that.";

    return res.status(200).json({
      choices: [
        {
          message: {
            content: reply,
            followups
          }
        }
      ]
    });

  } catch (err) {
    console.error("Internal server error:", err.message);
    return res.status(500).json({ error: "Server error", details: err.message });
  }
}
