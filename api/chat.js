import { getSymptomContext } from "./notion.js";

let sessionMemory = {
  sintomasDetectados: [],
  respostasUsuario: [],
  nome: "",
  idioma: "pt"
};

export default async function handler(req, res) {
  try {
    if (req.method !== "POST") {
      return res.status(405).json({ error: "Method not allowed. Use POST." });
    }

    const { message, name, age, sex, weight } = req.body;

    if (!message || message.trim().length === 0) {
      return res.status(400).json({ error: "No message provided." });
    }

    const isPortuguese = /[√£√µ√ß√°√©√≠√≥√∫]| voc√™|dor|tenho|problema|sa√∫de/i.test(message);
    const userName = name?.trim() || "";
    const userAge = parseInt(age);
    const userSex = (sex || "").toLowerCase();
    const userWeight = parseFloat(weight);

    const hasForm = userName && !isNaN(userAge) && userSex && !isNaN(userWeight);

    sessionMemory.nome = userName;
    sessionMemory.idioma = isPortuguese ? "pt" : "en";
    sessionMemory.respostasUsuario.push(message);

    const contextos = await getSymptomContext(message);
    const contexto = contextos?.[0];

    const intro = hasForm
      ? isPortuguese
        ? `${userName}, existem milhares de pessoas com esse nome. Sabia que 28% das mulheres com ${userAge} anos relatam ansiedade, 31% t√™m digest√£o lenta, e 20% n√£o usam suplementos? Coincid√™ncia ou padr√£o? Vamos descobrir.`
        : `${userName}, did you know 28% of women aged ${userAge} report anxiety, 31% struggle with digestion, and 20% don‚Äôt use any supplements? Coincidence or pattern? Let's explore.`
      : isPortuguese
        ? "Sem seu nome, idade ou peso, posso te dar conselhos‚Ä¶ t√£o √∫teis quanto ler a sorte no biscoito da sorte."
        : "Without your name, age or weight, my advice is as useful as a fortune cookie.";

    const emoji = userSex === "feminino" || userSex === "female" ? "üë©" : "üë®";
    const idioma = isPortuguese ? "pt" : "en";

    let followups = [];

// Varia√ß√µes engra√ßadas para quando o formul√°rio n√£o √© preenchido
const frasesSarcasticas = [
  "Sem seu nome, idade ou peso, posso te dar conselhos‚Ä¶ t√£o √∫teis quanto ler a sorte no biscoito da sorte.",
  "Sem dados, minha precis√£o √© t√£o boa quanto um hor√≥scopo de revista.",
  "Ignorar o formul√°rio? Estrat√©gia ousada. Vamos ver no que d√°.",
  "Voc√™ ignora sua sa√∫de assim tamb√©m? Posso tentar adivinhar seu perfil com superpoderes‚Ä¶ ou n√£o.",
  "Quer ajuda, mas n√£o preencheu nada? Legal. Posso tentar uma previs√£o estilo grupo de WhatsApp.",
  "Me ajudar a te ajudar? Preencher o formul√°rio seria um bom come√ßo üòâ"
];

// ‚úÖ DECLARA√á√ÉO √öNICA DE `intro`
const intro = hasForm
  ? (
    isPortuguese
      ? `${userName}, 28% das pessoas com ${userAge} anos relatam ansiedade, 31% t√™m digest√£o lenta, e 20% n√£o tomam suplemento. Mas voc√™ est√° aqui. Isso j√° √© um passo acima da m√©dia.`
      : `${userName}, 28% of people aged ${userAge} report anxiety, 31% struggle with digestion, and 20% don‚Äôt take any supplements. You‚Äôre already ahead by showing up.`
  )
  : frasesSarcasticas[Math.floor(Math.random() * frasesSarcasticas.length)];

// Bloco base do prompt
let prompt = `${intro}\n\nYou are OwlCoreHealth AI ü¶â ‚Äî a hybrid personality: smart, science-backed, sarcastic when needed, but always delivering useful answers. Never ask vague follow-up questions. Always give clear explanations, risks, and next steps. Guide the user toward solutions.`;

// üß† Contador de rodadas por sintoma
sessionMemory.sintomaAtual = contexto?.sintoma || null;
sessionMemory.contadorPerguntas = sessionMemory.contadorPerguntas || {};
if (contexto?.sintoma) {
  sessionMemory.contadorPerguntas[contexto.sintoma] = (sessionMemory.contadorPerguntas[contexto.sintoma] || 0) + 1;
}
const rodadas = sessionMemory.contadorPerguntas[contexto?.sintoma || ""] || 0;
const incluirSuplemento = rodadas >= 4;

if (contexto) {
  if (!sessionMemory.sintomasDetectados.includes(contexto.sintoma)) {
    sessionMemory.sintomasDetectados.push(contexto.sintoma);
  }

  const alerta = contexto && contexto.gravidade >= 4
    ? (isPortuguese
      ? "‚ö†Ô∏è Esse sintoma √© s√©rio. Se n√£o cuidar, pode escalar para algo bem pior."
      : "‚ö†Ô∏è This is a serious symptom. Ignoring it could make things worse.")
    : "";

  const base = (isPortuguese ? contexto.base_pt : contexto.base_en) || "";
  const p1 = (isPortuguese ? contexto.pergunta1_pt : contexto.pergunta1_en) || "";
  const p2 = (isPortuguese ? contexto.pergunta2_pt : contexto.pergunta2_en) || "";
  const p3 = (isPortuguese ? contexto.pergunta3_pt : contexto.pergunta3_en) || "";

  followups = [
    `${isPortuguese ? "Quer entender" : "Want to know"} ${p1}?`,
    `${isPortuguese ? "Deseja ver como isso impacta" : "Curious how this affects"} ${p2}?`,
    `${isPortuguese ? "Posso explicar solu√ß√µes pr√°ticas sobre" : "I can explain real solutions for"} ${p3}`
  ];

  prompt += `\n\n${alerta}\n\n${isPortuguese ? "Base cient√≠fica:" : "Scientific insight:"}\n${base}\n\n${
    isPortuguese ? "Vamos aprofundar com 3 ideias pr√°ticas:" : "Let's explore 3 practical angles:"
  }\n1. ${followups[0]}\n2. ${followups[1]}\n3. ${followups[2]}`;

  if (incluirSuplemento) {
    prompt += isPortuguese
      ? "\n\nSe quiser, posso te mostrar o suplemento ideal para esse caso. S√≥ dizer. üòâ"
      : "\n\nIf you're ready, I can show you the ideal supplement for this case. Just ask. üòâ";
  }

} else {
  followups = isPortuguese
    ? [
        "Quer entender como h√°bitos alimentares pioram esses sintomas?",
        "Deseja saber o que a ci√™ncia diz sobre isso?",
        "Quer ver estrat√©gias naturais para aliviar isso agora?"
      ]
    : [
        "Want to know how food habits worsen these symptoms?",
        "Curious what science says about this?",
        "Want to see natural strategies to relieve it now?"
      ];

  prompt += `\n\n${isPortuguese
    ? "Ainda n√£o detectei um sintoma claro, mas posso te orientar com conhecimento de verdade. Vamos come√ßar:"
    : "I didn‚Äôt detect a clear symptom yet, but I‚Äôll guide you with real insight. Let‚Äôs start:"}\n1. ${followups[0]}\n2. ${followups[1]}\n3. ${followups[2]}`;
}
    const openaiRes = await fetch("https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${process.env.OPENAI_API_KEY}`
      },
      body: JSON.stringify({
        model: "gpt-4o",
        temperature: 0.7,
        messages: [
          { role: "system", content: prompt },
          { role: "user", content: message }
        ]
      })
    });

    if (!openaiRes.ok) {
      const errorData = await openaiRes.json();
      console.error("GPT error:", errorData);
      return res.status(500).json({ error: "GPT communication failed", details: errorData });
    }

    const data = await openaiRes.json();
    const reply = data.choices?.[0]?.message?.content || "I'm not sure how to answer that.";

    return res.status(200).json({
      choices: [
        {
          message: {
            content: reply,
            followups
          }
        }
      ]
    });

  } catch (err) {
    console.error("Internal server error:", err.message);
    return res.status(500).json({ error: "Server error", details: err.message });
  }
}
